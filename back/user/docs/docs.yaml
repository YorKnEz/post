openapi: 3.0.0
info:
    title: User Service
    version: 1.0.0
    description: User Service API Documentation

paths:
    /api/users:
        get:
            summary: Get paginated users by specified filters
            description: This route returns a paginated list of users, based on some filtering criteria
            tags:
                - users
            parameters:
                - name: query
                  in: query
                  required: false
                  schema:
                      type: string
                  description: The query string to search by
                - name: start
                  in: query
                  required: true
                  schema:
                      type: integer
                  description: Offset of results to start from
                - name: count
                  in: query
                  required: true
                  schema:
                      type: integer
                  description: Number of results to return
                - name: sort
                  in: query
                  required: false
                  schema:
                      type: string
                  description: The sort criteria
                - name: order
                  in: query
                  required: false
                  schema:
                      type: string
                  description: The order of the sorting
            responses:
                '200':
                    description: Successful response
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/UserCard'
                                description: List of matched users
        post:
            summary: Create a new user
            tags:
                - users
                - TODO
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - nickname
                                - new_email
                                - roles
                                - verified
                                - password_hash
                                - password_salt
                            properties:
                                first_name:
                                    type: string
                                    description: The first name of the user
                                last_name:
                                    type: string
                                    description: The last name of the user
                                nickname:
                                    type: string
                                    description: The nickname of the user
                                new_email:
                                    type: string
                                    description: The email of the user
                                password_hash:
                                    type: string
                                    description: The hash of the password of the user
                                password_salt:
                                    type: string
                                    description: The salt of the password of the user
            responses:
                '201':
                    description: Successful response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'

    /api/users/{id}:
        get:
            summary: Get user by id
            tags:
                - users
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Id of the user
            responses:
                '200':
                    description: Successful response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '404':
                    description: User not found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'
        patch:
            summary: Update some of the user state
            description: Update the first name and/or last name of the user
            tags:
                - users
                - TODO
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Id of the user
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                first_name:
                                    type: string
                                    description: The first name of the user
                                last_name:
                                    type: string
                                    description: The last name of the user
            responses:
                '200':
                    description: Successful response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '404':
                    description: User not found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'
        delete:
            summary: Delete a user and it's work by id
            tags:
                - users
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Id of the user
            responses:
                '200':
                    description: Successful response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'
                '404':
                    description: User not found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'

    /api/users/{id}/albums:
        get:
            summary: Get the albums of this user
            description: Fetches all the albums for which this user is the poster or the author
            tags:
                - users
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Id of the user
            responses:
                '200':
                    description: Successful response
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Album'
                                description: List of matched albums

    /api/users/{id}/poems:
        get:
            summary: Get the poems of this user
            description: Fetches all the poems for which this user is the poster or the author
            tags:
                - users
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Id of the user
            responses:
                '200':
                    description: Successful response
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Poem'
                                description: List of matched poems

components:
    schemas:
        Message:
            type: object
            properties:
                code:
                    type: integer
                    description: The code of the message received (an error or a success message)
                message:
                    type: string
                    description: The english message associated with the code
            required:
                - code
        User:
            type: object
            properties:
                id:
                    type: integer
                    description: Unique identifier for the user
                roles:
                    type: integer
                    description: Roles assigned to the user
                nickname:
                    type: string
                    description: Nickname of the user
                last_name:
                    type: string
                    description: Last name of the user
                created_at:
                    type: string
                    format: date-time
                    description: Timestamp when the user was created
                first_name:
                    type: string
                    description: First name of the user
                updated_at:
                    type: string
                    format: date-time
                    description: Timestamp when the user was last updated
                poems_count:
                    type: integer
                    description: Count of poems created by the user
                albums_count:
                    type: integer
                    description: Count of albums created by the user
                annotations_count:
                    type: integer
                    description: Count of annotations created by the user
                poems_contributions:
                    type: integer
                    description: Number of poems the user has contributed to
                albums_contributions:
                    type: integer
                    description: Number of albums the user has contributed to
                created_lyrics_count:
                    type: integer
                    description: Count of lyrics created by the user
                lyrics_contributions:
                    type: integer
                    description: Number of lyrics the user has contributed to
                translated_lyrics_count:
                    type: integer
                    description: Count of lyrics translated by the user
                annotations_contributions:
                    type: integer
                    description: Number of annotations the user has contributed to
            required:
                - id
                - roles
                - nickname
                - last_name
                - created_at
                - first_name
                - updated_at
                - poems_count
                - albums_count
                - annotations_count
                - poems_contributions
                - albums_contributions
                - created_lyrics_count
                - lyrics_contributions
                - translated_lyrics_count
                - annotations_contributions
        UserCard:
            type: object
            properties:
                id:
                    type: integer
                    description: Unique identifier for the user
                roles:
                    type: integer
                    description: Roles assigned to the user
                nickname:
                    type: string
                    description: Nickname of the user
                last_name:
                    type: string
                    description: Last name of the user
                first_name:
                    type: string
                    description: First name of the user
            required:
                - id
                - roles
                - nickname
                - last_name
                - first_name
                - message
