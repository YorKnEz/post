name: post
services:
    db:
        image: postgres:alpine
        networks:
            - post-network
        ports:
            - '$PUBLIC_DB_PORT:$DB_PORT'
        environment:
            - POSTGRES_DB=$DB_NAME
            - POSTGRES_USER=$DB_USER
            - POSTGRES_PASSWORD=$DB_PASS
        volumes:
            - ./db/entrypoint.sql:/docker-entrypoint-initdb.d/entrypoint.sql
            - pgdata:/var/lib/postgresql/data

    front:
        build:
            context: .
            dockerfile: web_server.Dockerfile
        networks:
            - post-network
        ports:
            - '$FRONTEND_PORT:$FRONTEND_PORT'
        environment:
            - HOST=0.0.0.0
            - PORT=$FRONTEND_PORT
            - CONTENT_LOCATION=/app/front
            - AUTH_SERVICE_API_URL=$AUTH_SERVICE_API_URL
            - IMAGE_SERVICE_API_URL=$IMAGE_SERVICE_API_URL
            - LYRICAL_SERVICE_API_URL=$LYRICAL_SERVICE_API_URL
            - USER_SERVICE_API_URL=$USER_SERVICE_API_URL
        volumes:
            - ./front:/app/front
            - ./lib:/app/lib
            - ./web_server:/app/web_server
            - ./cert.key:/app/web_server/cert.key
            - ./cert.pem:/app/web_server/cert.pem
            - /app/web_server/node_modules

    auth:
        build:
            context: .
            dockerfile: back.Dockerfile
            args:
                name: auth
        networks:
            - post-network
        depends_on:
            - db
        ports:
            - '$AUTH_SERVICE_PORT:$AUTH_SERVICE_PORT'
        environment:
            - HOST=0.0.0.0
            - PORT=$AUTH_SERVICE_PORT
            - DOCS_LOCATION=/app/back/auth/docs/
            - DB_HOST=$DB_HOST
            - DB_PORT=$DB_PORT
            - DB_NAME=$DB_NAME
            - DB_USER=$DB_USER
            - DB_PASS=$DB_PASS
            - EMAIL_USER=$EMAIL_USER
            - EMAIL_PASS=$EMAIL_PASS
            - PUBLIC_DOMAIN=$PUBLIC_DOMAIN
            - PUBLIC_URL=$AUTH_SERVICE_URL
            - FRONTEND_URL=$FRONTEND_URL
            - IMAGE_SERVICE_API_URL=$IMAGE_SERVICE_API_URL
            - NODE_TLS_REJECT_UNAUTHORIZED=0
        volumes:
            - ./lib:/app/lib
            - ./back/auth:/app/back/auth
            - ./cert.key:/app/back/auth/cert.key
            - ./cert.pem:/app/back/auth/cert.pem
            - /app/back/auth/node_modules

    image:
        build:
            context: .
            dockerfile: back.Dockerfile
            args:
                name: image
        networks:
            - post-network
        depends_on:
            - db
        ports:
            - '$IMAGE_SERVICE_PORT:$IMAGE_SERVICE_PORT'
        environment:
            - HOST=0.0.0.0
            - PORT=$IMAGE_SERVICE_PORT
            - DOCS_LOCATION=/app/back/image/docs/
            - PUBLIC_URL=$IMAGE_SERVICE_URL
            - PUBLIC_API_URL=$IMAGE_SERVICE_API_URL
            - FRONTEND_URL=$FRONTEND_URL
            - NODE_TLS_REJECT_UNAUTHORIZED=0
        volumes:
            - ./lib:/app/lib
            - ./back/image:/app/back/image
            - ./cert.key:/app/back/image/cert.key
            - ./cert.pem:/app/back/image/cert.pem
            - /app/back/image/node_modules

    lyrical:
        build:
            context: .
            dockerfile: back.Dockerfile
            args:
                name: lyrical
        networks:
            - post-network
        depends_on:
            - db
        ports:
            - '$LYRICAL_SERVICE_PORT:$LYRICAL_SERVICE_PORT'
        environment:
            - HOST=0.0.0.0
            - PORT=$LYRICAL_SERVICE_PORT
            - DOCS_LOCATION=/app/back/lyrical/docs/
            - DB_HOST=$DB_HOST
            - DB_PORT=$DB_PORT
            - DB_NAME=$DB_NAME
            - DB_USER=$DB_USER
            - DB_PASS=$DB_PASS
            - EMAIL_USER=$EMAIL_USER
            - EMAIL_PASS=$EMAIL_PASS
            - PUBLIC_URL=$LYRICAL_SERVICE_URL
            - FRONTEND_URL=$FRONTEND_URL
            - AUTH_SERVICE_API_URL=$AUTH_SERVICE_API_URL
            - IMAGE_SERVICE_API_URL=$IMAGE_SERVICE_API_URL
            - NODE_TLS_REJECT_UNAUTHORIZED=0
        volumes:
            - ./lib:/app/lib
            - ./back/lyrical:/app/back/lyrical
            - ./cert.key:/app/back/lyrical/cert.key
            - ./cert.pem:/app/back/lyrical/cert.pem
            - /app/back/lyrical/node_modules

    user:
        build:
            context: .
            dockerfile: back.Dockerfile
            args:
                name: user
        networks:
            - post-network
        depends_on:
            - db
        ports:
            - '$USER_SERVICE_PORT:$USER_SERVICE_PORT'
        environment:
            - HOST=0.0.0.0
            - PORT=$USER_SERVICE_PORT
            - DOCS_LOCATION=/app/back/user/docs/
            - DB_HOST=$DB_HOST
            - DB_PORT=$DB_PORT
            - DB_NAME=$DB_NAME
            - DB_USER=$DB_USER
            - DB_PASS=$DB_PASS
            - EMAIL_USER=$EMAIL_USER
            - EMAIL_PASS=$EMAIL_PASS
            - PUBLIC_URL=$USER_SERVICE_URL
            - FRONTEND_URL=$FRONTEND_URL
            - AUTH_SERVICE_API_URL=$AUTH_SERVICE_API_URL
            - NODE_TLS_REJECT_UNAUTHORIZED=0
        volumes:
            - ./lib:/app/lib
            - ./back/user:/app/back/user
            - ./cert.key:/app/back/user/cert.key
            - ./cert.pem:/app/back/user/cert.pem
            - /app/back/user/node_modules

networks:
    post-network:
        driver: bridge

volumes:
    pgdata:
